<!--CONTAINER GRIDS PRODUCTS -->
            <div class='px-4 py-4 grid grid-cols-2 md:grid-cols-5 lg:grid-cols-10 gap-4'>
                
                {{#each productsList}}
                    <div class="w-full flex flex-col justify-between bg-white border border-gray-200 rounded-lg">
                        
                        
                        <a href="/views/product/{{this.id}}" class="flex flex-col items-center px-3 mb-4">
                            <img class="p-8 rounded-t-lg" src={{this.img}} alt={{this.title}} />
                            <p class="text-l font-semibold tracking-tight text-gray-900 dark:text-white">{{this.title}}</p>
                        </a>
                        <div>
                            <div class="px-5 mb-4">
                             
                                    <p class="text-sm text-gray-500 truncate">{{this.description}}</p>
                                    <div class="flex col items-center justify-between">
                                        <span class="mx-auto text-xl font-bold text-pink-500">${{this.price}}</span>
                                    </div>
                                
                            </div>  

                            <form  class="w-full bg-lime-100 py-8 border border-slate-200 p-3 flex flex-col items-center space-y-2">
                                <div  class="flex mx-auto">
                                    <label for="counter-input" class="block text-sm font-medium text-gray-900">Cantidad</label>
                                    <div class="relative flex items-center">
                                        <button type="button" id="decrement-button-{{this.id}}" onclick="decrementCounterQuantity(`{{this.id}}`)"  class="flex-shrink-0 bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 dark:border-gray-600 hover:bg-gray-200 inline-flex items-center justify-center border border-gray-300 rounded-md h-5 w-5 focus:ring-gray-100 dark:focus:ring-gray-700 focus:ring-2 focus:outline-none">
                                            <svg class="w-2.5 h-2.5 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16"/>
                                            </svg>
                                        </button>
                                        <input type="number"  min="1" max="{{this.stock}}" id="counter-input-{{this.id}}" class="flex-shrink-0 text-gray-900 border-0 bg-transparent text-sm font-normal focus:outline-none focus:ring-0 max-w-[2.5rem] text-center" value="1" required />
                                        <button type="button" id="increment-button-{{this.id}}" onclick="incrementCounterQuantity(`{{this.id}}`,`{{this.stock}}`)"  class="flex-shrink-0 bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 dark:border-gray-600 hover:bg-gray-200 inline-flex items-center justify-center border border-gray-300 rounded-md h-5 w-5 focus:ring-gray-100 dark:focus:ring-gray-700 focus:ring-2 focus:outline-none">
                                            <svg class="w-2.5 h-2.5 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16"/>
                                            </svg>
                                        </button>
                                    </div>
                                </div>

                                <p class="text-sm text-gray-500 truncate dark:text-gray-400">({{this.stock}} disponibles)</p>
                            

                                <button id={{this.id}} type="button" onclick="addThisProduct(event)"  class="flex flex-row text-blue-500 hover:text-green-800 ">
                                    <svg class="w-3.5 h-2.5 " aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 21">
                                        <path d="M15 12a1 1 0 0 0 .962-.726l2-7A1 1 0 0 0 17 3H3.77L3.175.745A1 1 0 0 0 2.208 0H1a1 1 0 0 0 0 2h.438l.6 2.255v.019l2 7 .746 2.986A3 3 0 1 0 9 17a2.966 2.966 0 0 0-.184-1h2.368c-.118.32-.18.659-.184 1a3 3 0 1 0 3-3H6.78l-.5-2H15Z"/>
                                    </svg>
                                            Agregar al carrito
                                </button>

                                <button id='button-{{this.id}}' type="button" onclick="purchaseThisProduct(event)"  class="text-white bg-red-500 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-s px-5 py-1 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Comprar</button>
                             
                            </form>
                        </div>

                    </div>
                   
                {{/each}}
            </div>
            
        



        
<script>
    /*--MANEJO DEL AGREGADO DE PRODUCTOS AL CARRO Y MANIPULACION DEL DOM PARA QUE SE VEA REFLEJADO EN LA VISTA
        -A travez de handlebars traje la iformacion del usuario logueado en la app.
        -La plantilla renderiza una card por cada producto. Cada Boton 'agregar a carro' llevara por ID el product ID correspondiente
    */
    const loggedUserInfo = {{{loggedUserInfo}}} 
    console.log('User Info: ', loggedUserInfo)
    const actualCart = loggedUserInfo.user.cart 
    const actualUserId = loggedUserInfo.user._id

    function redirectToLogin(event){
        //Tomo el event porque voy a guardar esos datos en localstorage para al iniciar sesion hacer con el producto lo que el user queria hacer ejemplo agregar al carro o ir a comprar.
          
          //Muestro notificacion que para hacer la operacion es necesario estar logueado y redirijo.
          
           Swal.fire({
                
                    text: `Es necesario iniciar sesion para guardar productos en el carrito !`,
                    icon: 'info',
                    confirmButtonText: 'Continuar',
                    allowOutsideClick: false, // No permitir cerrar al hacer clic fuera del diÃ¡logo
                    allowEscapeKey: false     // No permitir cerrar con la tecla Escape
                })
                .then(()=>{
                    window.location.href = `/views/login`
                })
                
          
          
    }
    
    function addThisProduct(event){

        //Con esta condicion si el user no esta logueado lo mando a iniciar sesion.
        if (!loggedUserInfo.login) return redirectToLogin(event)
       

          //sabemos que el boton tiene el id del producto x lo tanto tenemos el id del producto a agregar
        const productId = event.target.id
         //sabemos que el input de cantidad se llama counter input y tiene el ID del producto. Tomamos su valor o sea la cantidad.
        const selectedQuantity = document.getElementById(`counter-input-${productId}`).value
        //Tenemos la cantidad seleccionada, el productID y el cart donde agregar, usamos fetch para llevar a cabo la operacacion haciendo solicitud.
        //Y de acuerdo a lo que envia el server mando una notiicacion de tostify
        //console.log(productId,selectedQuantity)
       
       
       //Dado que tenemos programado para que nuestro endpoint devuelva 201 si puede agregarse al carro y 403 si no se puede (Ejemplo caso user premium)
       
       //Por una cuestion de consigna uso este endpoint pero podria usar el de api/purchases/checkout cart que hace lo mismo
        fetch(`/api/carts/${actualCart}/products/${productId}`,
            {
                method:'POST', 
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ quantity: Number(selectedQuantity) })
               })
                .then(response => {
                    //console.log(response)
                   //Segun la respuesta mostramos un alert o finalmente actualizamos el carro en el dom en la barra
                    if (!response.ok){
                        response.json()
                        .then(data =>{
                             Swal.fire({icon: 'error',title: 'Error al intentar comprar...',text: data.message})
                        })
                    }
                    else{
                        response.json().
                        then( res => {
                            //Se agrega al carrito.
                            //console.log(res)
                            document.getElementById('productsQuantityInUserCart').innerText = res.cart.countProducts
                        })
                        //Si el estado es OK puedo agregar al carro...
                        //Manipulando Dom el cambiamos la cantidad de carritos en el navbar
                       
                    }

                })
                
        }



     
    function purchaseThisProduct(event){
        //Con esta condicion si el user no esta logueado lo mando a iniciar sesion.
        if (!loggedUserInfo.login) return redirectToLogin(event)
          //sabemos que el boton tiene el nombre boton+'-'iddelproducto' del producto x lo tanto tenemos el id del producto a agregar
        const pressedButtonId = event.target.id //Hay que recortarlo a partir del '-'
        const separatorPosition = pressedButtonId.indexOf('-')
        const productId = pressedButtonId.substring(separatorPosition+1)
        console.log(productId,'user: ', actualUserId)
         //sabemos que el input de cantidad se llama counter input y tiene el ID del producto. Tomamos su valor o sea la cantidad.
        const selectedQuantity = document.getElementById(`counter-input-${productId}`).value
        //Tenemos la cantidad seleccionada, el productID y el cart donde agregar, usamos fetch para llevar a cabo la operacacion haciendo solicitud.
        //Y de acuerdo a lo que envia el server mando una notiicacion de tostify
        //console.log(productId,selectedQuantity)
        //window.location.href = `/views/${productId}/singlepurchase/${selectedQuantity}/${actualUserId}`
        //Hago fetching...
        fetch(`/api/purchases/singlepurchase`,{
            method: 'POST',
             headers: {'Content-Type': 'application/json'},
             body: JSON.stringify({ productId: productId,quantity: Number(selectedQuantity),userId: actualUserId })
        })
        .then(response => {
            if (response.ok){
                //Tomo los datos para dar un mensaje y redirigir 
                response.json()
                .then(data => {
                    //console.log(data)
                    Swal.fire({
                        title: 'Compra exitosa !',
                        text: `Tu compra se realizo con exito. Se enviaran los detalles a tu email. Se genero el ticket ${data.ticket.code}.`,
                        icon: 'success',
                        confirmButtonText: 'Continuar',
                        allowOutsideClick: false, // No permitir cerrar al hacer clic fuera del diÃ¡logo
                        allowEscapeKey: false     // No permitir cerrar con la tecla Escape
                    })
                    .then((swalResult)=>{
                    //Se redirige a la vista del ticket con el correspodiente codigo.
                    window.location.href = `/views/${data.ticket.code}/purchase`
                })

                    })
                }
            else{
                 response.json()
                    .then(data => {
                        Swal.fire({icon: 'error',title: 'Error en compra',text: data.message})
                    })
            }
        })
        }
</script>









<script>
    /*-- MANEJO BOTONES +/-----------------------------------------------------------------
    //teniendo en cuenta estas caracteristicas de los input min="1" max="{{this.stock}}" id="counter-input-{{this.id}}"
     -Cada input tiene un minimo de 1 y un maximo de cantidad de productos en stock igual que mercado libre.
     -id="decrement-button-{{this.id}}" onclick="decrementCounterQuantity(`{{this.id}}`)"
     -id="increment-button-{{this.id}}" onclick="incrementCounterQuantity(`{{this.id}}`)"
     */

    const decrementCounterQuantity = (id) => {
       const selectedInput = document.getElementById(`counter-input-${id}`)
        //Le resto y cambio el valor numerico si es mayor a 2
        if (selectedInput.value >= 2) selectedInput.value = Number(selectedInput.value) - 1
    }

    const incrementCounterQuantity = (id,stock) => {
        const selectedInput = document.getElementById(`counter-input-${id}`)
        //Le resto y cambio el valor numerico si es mayor a 2
        if (selectedInput.value < Number(stock)) selectedInput.value = Number(selectedInput.value) + 1
    }
</script>